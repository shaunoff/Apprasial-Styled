{"version":3,"sources":["../src/attachRefs.js"],"names":["attachRefs","element","itemMap","idx","key","previousRef","ref","Error","item","has","get","children","Map","set","component","node","findDOMNode","props","originalChildren","cloneChild","map","child","childIdx","isValidElement","cloneElement"],"mappings":";;;;;;;;kBAGwBA,U;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,OAA7B,EAA+C;AAAA,MAATC,GAAS,yDAAH,CAAG;AAAA,MACvDC,GADuD,GAC9BH,OAD8B,CACvDG,GADuD;AAAA,MAC7CC,WAD6C,GAC9BJ,OAD8B,CAClDK,GADkD;;AAE5D,MAAIF,QAAQ,IAAZ,EAAkB;AAChBA,UAAMD,GAAN;AACD;;AAED,MAAI,OAAOE,WAAP,KAAuB,QAA3B,EAAqC;AACnC,UAAME,MAAM,qFACQF,WADR,oSAAN,CAAN;AAMD;;AAED,MAAIG,IAAJ;AACA,MAAIN,QAAQO,GAAR,CAAYL,GAAZ,CAAJ,EAAsB;AACpBI,WAAON,QAAQQ,GAAR,CAAYN,GAAZ,CAAP;AACD,GAFD,MAGK;AACHI,WAAO,EAACG,UAAU,IAAIC,GAAJ,EAAX,EAAP;AACAV,YAAQW,GAAR,CAAYT,GAAZ,EAAiBI,IAAjB;AACD;;AAED,MAAI,CAACA,KAAKF,GAAV,EAAe;AACbE,SAAKF,GAAL,GAAW,UAACQ,SAAD,EAAe;AACxB,UAAIC,OAAO,mBAASC,WAAT,CAAqBF,SAArB,CAAX;AACAN,WAAKS,KAAL,GAAahB,QAAQgB,KAArB;AACAT,WAAKO,IAAL,GAAYA,IAAZ;;AAEA,UAAI,OAAOV,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,oBAAYS,SAAZ;AACD;AACF,KARD;AASD;;AAED,MAAMI,mBAAmBjB,QAAQgB,KAAR,CAAcN,QAAvC;AACA,MAAIA,iBAAJ;AACA,MAAI,QAAOO,gBAAP,yCAAOA,gBAAP,OAA4B,QAAhC,EAA0C;AACxCP,eAAWO,gBAAX;AACD,GAFD,MAGK,IAAI,2BAAeA,gBAAf,CAAJ,EAAsC;AACzCP,eAAWQ,WAAWD,gBAAX,CAAX;AACD,GAFI,MAGA;AACHP,eAAW,gBAASS,GAAT,CAAaF,gBAAb,EAA+B,UAACG,KAAD,EAAQC,QAAR,EAAqB;AAC7D,aAAOH,WAAWE,KAAX,EAAkBC,QAAlB,CAAP;AACD,KAFU,CAAX;AAGD;;AAED,WAASH,UAAT,CAAoBE,KAApB,EAA2BC,QAA3B,EAAqC;AACnC,QAAI,gBAAMC,cAAN,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,aAAOrB,WAAWqB,KAAX,EAAkBb,KAAKG,QAAvB,EAAiCW,QAAjC,CAAP;AACD,KAFD,MAGK;AACH,aAAOD,KAAP;AACD;AACF;;AAED,SAAO,gBAAMG,YAAN,CAAmBvB,OAAnB,EAA4B,EAACK,KAAKE,KAAKF,GAAX,EAAgBK,kBAAhB,EAA5B,CAAP;AACD","file":"attachRefs.js","sourcesContent":["import React, {Children, isValidElement} from 'react'\nimport ReactDOM from 'react-dom'\n\nexport default function attachRefs(element, itemMap, idx = 0) {\n  var {key, ref: previousRef} = element\n  if (key === null) {\n    key = idx\n  }\n\n  if (typeof previousRef === 'string') {\n    throw Error(`[react-gsap-enhancer] On one of the elements you have used a `\n      + `string ref (\"${previousRef}\") but react-gsap-enhancer can only handle `\n      + `callback refs. Please migrate the string refs to callback refs in the `\n      + `enhanced component.\nExample: change <div ref='foo'/> to <div ref={comp => this.foo = comp}/>\nSee also: https://github.com/azazdeaz/react-gsap-enhancer/issues/3`)\n  }\n\n  var item\n  if (itemMap.has(key)) {\n    item = itemMap.get(key)\n  }\n  else {\n    item = {children: new Map()}\n    itemMap.set(key, item)\n  }\n\n  if (!item.ref) {\n    item.ref = (component) => {\n      var node = ReactDOM.findDOMNode(component)\n      item.props = element.props\n      item.node = node\n\n      if (typeof previousRef === 'function') {\n        previousRef(component)\n      }\n    }\n  }\n\n  const originalChildren = element.props.children\n  let children\n  if (typeof originalChildren !== 'object') {\n    children = originalChildren\n  }\n  else if (isValidElement(originalChildren)) {\n    children = cloneChild(originalChildren)\n  }\n  else {\n    children = Children.map(originalChildren, (child, childIdx) => {\n      return cloneChild(child, childIdx)\n    })\n  }\n\n  function cloneChild(child, childIdx) {\n    if (React.isValidElement(child)) {\n      return attachRefs(child, item.children, childIdx)\n    }\n    else {\n      return child\n    }\n  }\n\n  return React.cloneElement(element, {ref: item.ref, children})\n}\n"]}