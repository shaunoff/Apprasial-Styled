{"version":3,"sources":["../src/gsap-enhancer.js"],"names":["animationSourceMap","prototype","render","ComposedComponent","enhance","undefined","bind","GSAPEnhancer","props","addAnimation","animationSource","options","sourceMap","__animationSourceMap","error","Object","keys","name","getPrototypeOf","constructor","Error","target","__itemTree","controller","__runningAnimations","delete","forceUpdate","add","Map","Set","console","warn","kill","args","element","composedName","displayName","defineProperty","value","writable","configurable"],"mappings":"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","file":"gsap-enhancer.js","sourcesContent":["import {isValidElement} from 'react'\nimport attachRefs from './attachRefs'\nimport Controller from './Controller'\nimport createTarget from './createTarget'\nimport {\n  reattachAll,\n  attachAll,\n  restoreRenderedStyles,\n  saveRenderedStyles\n} from './utils'\n\nexport default function (animationSourceMap) {\n  if (\n    animationSourceMap &&\n    animationSourceMap.prototype &&\n    animationSourceMap.prototype.render\n  ) {\n    const ComposedComponent = animationSourceMap\n    return enhance(undefined, ComposedComponent)\n  }\n  else {\n    return enhance.bind(undefined, animationSourceMap)\n  }\n}\n\nfunction enhance (animationSourceMap, ComposedComponent) {\n  class GSAPEnhancer extends ComposedComponent {\n    constructor(props) {\n      super(props)\n      this.__itemTree = new Map()\n      this.__runningAnimations = new Set()\n      this.__animationSourceMap = animationSourceMap\n    }\n\n    addAnimation = (animationSource, options) => {\n      //if the animation is in the source map the if from there\n      const sourceMap = this.__animationSourceMap\n      if (sourceMap && sourceMap[animationSource]) {\n        animationSource = sourceMap[animationSource]\n      }\n\n      if (__DEV__) {\n        if (typeof animationSource !== 'function') {\n          let error = `[react-gsap-enhancer] animationSource (the first parameter of `\n            + `addAnimation(animationSource, options)) has to be a function instead of \"${animationSource}\"`\n          if (sourceMap) {\n            error += `\\nYou provided a sourceMap so the animationSource also can`\n             + ` be a string key of these: [${Object.keys(sourceMap)}]`\n          }\n          const name = Object.getPrototypeOf(Object.getPrototypeOf(this)).constructor.name\n          error += `\\nCheck out the addAnimation() call in ${name}`\n          throw Error(error)\n        }\n      }\n\n      const target = createTarget(this.__itemTree)\n      const controller = new Controller(\n        animationSource,\n        options,\n        target,\n        () => reattachAll(\n          this.__itemTree,\n          this.__runningAnimations\n        ),\n        () => {\n          this.__runningAnimations.delete(controller)\n          //rerender the component without the animation\n          this.forceUpdate()\n        }\n      )\n      this.__runningAnimations.add(controller)\n      //the animation will be attached on the next render so force the update\n      this.forceUpdate()\n\n      return controller\n    }\n\n    removeAnimation(controller) {\n      if (__DEV__) {\n        console.warn(\n          '[react-gsap-enhancer] component.removeAnimation(controller)'\n          + ' is deprecated. Use just controller.kill() instead!'\n        )\n      }\n      controller.kill()\n    }\n\n    componentDidMount(...args) {\n      saveRenderedStyles(this.__itemTree)\n\n      if (super.componentDidMount) {\n        super.componentDidMount(...args)\n      }\n    }\n\n    componentWillUpdate(...args) {\n      restoreRenderedStyles(this.__itemTree)\n\n      if (super.componentWillUpdate) {\n        super.componentWillUpdate(...args)\n      }\n    }\n\n    render(...args) {\n      const element = super.render(...args)\n      if (isValidElement(element)) {\n        return attachRefs(element, this.__itemTree)\n      }\n      else {\n        //let React throwing an error for invalid element\n        return element\n      }\n    }\n\n    componentDidUpdate(...args) {\n      saveRenderedStyles(this.__itemTree)\n      attachAll(this.__runningAnimations)\n\n      if (super.componentDidUpdate) {\n        super.componentDidUpdate(...args)\n      }\n    }\n  }\n\n\n  //TODO test this\n  // Class inheritance uses Object.create and because of __proto__ issues\n  // with IE <10 any static properties of the superclass aren't inherited and\n  // so need to be manually populated\n  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-\n  // var staticKeys = [\n  //   'defaultProps',\n  //   'propTypes',\n  //   'contextTypes',\n  //   'childContextTypes'\n  // ]\n  //\n  // staticKeys.forEach((key) => {\n  //   if (ComposedComponent.hasOwnProperty(key)) {\n  //     GSAPEnhancer[key] = ComposedComponent[key]\n  //   }\n  // })\n\n  //TODO test this\n  // if (process.env.NODE_ENV !== 'production') {\n  //   // This fixes React Hot Loader by exposing the original components top level\n  //   // prototype methods on the enhanced prototype as discussed in\n  //   // https://github.com/FormidableLabs/radium/issues/219\n  //   Object.keys(ComposedComponent.prototype).forEach(key => {\n  //     if (!GSAPEnhancer.prototype.hasOwnProperty(key)) {\n  //       var descriptor = Object.getOwnPropertyDescriptor(ComposedComponent.prototype, key)\n  //       Object.defineProperty(GSAPEnhancer.prototype, key, descriptor)\n  //     }\n  //   })\n  // }\n\n  const composedName = ComposedComponent.displayName || ComposedComponent.name || 'Component'\n  const displayName = `GSAP(${composedName})`\n  Object.defineProperty(GSAPEnhancer, 'displayName', { value: displayName, writable: true, configurable: true })\n\n  return GSAPEnhancer\n}\n"]}