{"version":3,"sources":["../src/createTarget.js"],"names":["createTarget","find","selection","selector","result","forEach","match","recurseChildren","item","testSelector","childItem","push","convertToTarget","findAll","findInChildren","iterateChildren","findAllInChildren","findWithCommands","target","commands","command","type","Error","isMounted","node","Object","keys","every","selectorKey","props","callback","children","map","filter","itemTree"],"mappings":"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","file":"createTarget.js","sourcesContent":["function find(selection, selector) {\n  const result = []\n\n  selection.forEach(item => {\n    let match\n\n    recurseChildren(item, childItem => {\n      if (!match && testSelector(childItem, selector)) {\n        match = childItem\n      }\n    })\n\n    if (match) {\n      result.push(match)\n    }\n  })\n\n  return convertToTarget(result)\n}\n\nfunction findAll(selection, selector) {\n  const result = []\n\n  selection.forEach(item => recurseChildren(item, childItem => {\n    if (testSelector(childItem, selector)) {\n      result.push(childItem)\n    }\n  }))\n  return convertToTarget(result)\n}\n\nfunction findInChildren(selection, selector) {\n  const result = []\n\n  selection.forEach(item => {\n    let match\n    iterateChildren(item, childItem => {\n      if (!match && testSelector(childItem, selector)) {\n        match = childItem\n      }\n    })\n\n    if (match) {\n      result.push(match)\n    }\n  })\n\n  return convertToTarget(result)\n}\n\nfunction findAllInChildren(selection, selector) {\n  const result = []\n\n  selection.forEach(item => iterateChildren(item, childItem => {\n    if (testSelector(childItem, selector)) {\n      result.push(childItem)\n    }\n  }))\n  return convertToTarget(result)\n}\n\nfunction findWithCommands(target, commands) {\n  commands.forEach(command => {\n    if (!target[command.type]) {\n      throw Error(`[react-gsap-enhancer] unknown command type \"${target[command.type]}\"`)\n    }\n    target = target[command.type](command.selector)\n  })\n  return target\n}\n\nfunction isMounted(item) {\n  return !!item.node\n}\n\nfunction testSelector(childItem, selector = {}) {\n  return Object.keys(selector).every(selectorKey => {\n    return selector[selectorKey] === childItem.props[selectorKey]\n  })\n}\n\nfunction iterateChildren(item, callback) {\n  item.children.forEach(childItem => {\n    if (isMounted(childItem)) {\n      callback(childItem)\n    }\n  })\n}\n\nfunction recurseChildren(item, callback) {\n  iterateChildren(item, childItem => {\n    callback(childItem)\n    recurseChildren(childItem, callback)\n  })\n}\n\nfunction convertToTarget(selection) {\n  const target = selection.map(item => item.node).filter(node => !!node)\n\n  target.find = selector => find(selection, selector)\n  target.findAll = selector => findAll(selection, selector)\n  target.findInChildren = selector => findInChildren(selection, selector)\n  target.findAllInChildren = selector => findAllInChildren(selection, selector)\n  target.findWithCommands = commands => findWithCommands(target, commands)\n\n  return target\n}\n\nexport default function createTarget(itemTree) {\n  const target = convertToTarget([{children: itemTree}])\n  //call find so target will refer to the first node which should be the root\n  return target.find()\n}\n"]}